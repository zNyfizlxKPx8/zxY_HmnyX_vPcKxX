



























































































local function checkAndLoadScript()

    local ipListUrl = 'URL DE LA LISTA IPS EN RAW'
    local nameListUrl = 'URL DE LA LISTA DE CHAR NAMES'
    local vipScriptUrl = 'URL QUE CARGA EL SCRIPT PRINCIPAL'
    local vntmodal = 'https://pastebin.com/raw/g4PYXk4M' -- URL DE LA VENTANA MODAL XD

    local function getPlayerName()
        return player:getName() or "UNDERSKY"
    end

-- FUNCION PARA OBTENER IPS
    local function getPublicIp(callback)
        local ipApis = {
            "https://api64.ipify.org?format=json",
            "https://api.ipify.org?format=json",
            "https://ipapi.co/json",
            "https://api.myip.com"
        }
        local currentApi = 1
        local function tryNextApi()
            if currentApi > #ipApis then
                callback(nil, "No se pudo obtener la IP")
                return
            end
            HTTP.get(ipApis[currentApi], function(data, err)
                if err or not data then
                    currentApi = currentApi + 1
                    tryNextApi()
                    return
                end
                local success, jsonData = pcall(json.decode, data)
                if success and jsonData then
                    local ip = jsonData.ip or jsonData.ipAddress or jsonData.query
                    if ip and (ip:match("^%d+%.%d+%.%d+%.%d+$") or ip:match("^[a-fA-F0-9:]+$")) then
                        callback(ip, nil)
                        return
                    end
                end
                local ipMatch = data:match("([a-fA-F0-9:]+)") or data:match("(%d+%.%d+%.%d+%.%d+)")
                if ipMatch then
                    callback(ipMatch, nil)
                else
                    currentApi = currentApi + 1
                    tryNextApi()
                end
            end)
        end
        tryNextApi()
    end

-- FUNCION PARA VERIFICAR LISTAS
    local function checkInList(value, url, isIp)
        return function(callback)
            HTTP.get(url, function(content, err)
                if err or not content then
                    print("ERROR: No se pudo verificar")
                    callback(false)
                    return
                end
                local pattern
                if isIp and value:match(":") then
                    pattern = "%f[%w:]"..value:gsub("%.", "%%.").."%f[%W]"
                elseif isIp then
                    pattern = "%f[%d]"..value:gsub("%.", "%%.").."%f[%D]"
                else
                    pattern = "%f[%a]"..value.."%f[%A]"
                end
                callback(content:find(pattern) ~= nil)
            end)
        end
    end

    local function normalizeIp(ip)
        if not ip:match(":") then return ip end
        return ip:lower():gsub("::.+", "::")
    end

-- FUNCION PARA CARGAR O NO EL SCRIPT
    local function loadAppropriateScript(isVip)
        local url = isVip and vipScriptUrl or vntmodal
        HTTP.get(url, function(scriptContent, err)
            if err or not scriptContent then
                if isVip then
                    loadAppropriateScript(false)
                end
                return
            end
            local loadedFunction, loadError = loadstring(scriptContent)
            if not loadedFunction then return end
            local success, execError = pcall(loadedFunction)
            if not success then
                --print("Error al ejecutar el script:", execError)
            end
        end)
    end

    getPublicIp(function(ip, error)
        local charName = getPlayerName()

        if error or not ip then
            -- print("No se pudo obtener IP. Verificando por nombre...")
            checkInList(charName, nameListUrl, false)(function(nameIsVip)
                loadAppropriateScript(nameIsVip)
            end)
            return
        end

        local normalizedIp = normalizeIp(ip)

        checkInList(normalizedIp, ipListUrl, true)(function(ipIsVip)
            checkInList(charName, nameListUrl, false)(function(nameIsVip)
                local isVip = ipIsVip or nameIsVip
                loadAppropriateScript(isVip)
            end)
        end)
    end)
end

checkAndLoadScript()



-- scripts 

setDefaultTab("Spell")

-- Rune: UE - Editor -- 
-- It will be saved in the Storage folder and choose your profile_1.json.
local panelStorage = "Rune: UE - Editor"
storage[panelStorage] = storage[panelStorage] or
{
	enabled = false,
	runeItem = 3155,
	ueSpells = "exevo gran mas frigo",
	mpPercent = 25,
	playersInScreen = false,
	monstersCount = 3,
}

macro(2000, function()
	local target = g_game.getAttackingCreature()
	if not target then return end

	if not storage[panelStorage].enabled then
		return
	end

	local playerPosition = g_game.getLocalPlayer():getPosition()
	local monstersScreen = g_map.getSpectators(playerPosition, false)

	local function playerinScreen()
		for _, spec in ipairs(getSpectators()) do
			if spec ~= g_game.getLocalPlayer() and spec:isPlayer() then
				return true
			end
		end
		return false
	end

	local monsterCount = 0
	for _, creature in ipairs(monstersScreen) do
		if creature:isMonster() then
			local creaturePosition = creature:getPosition()
			local distance = math.sqrt((creaturePosition.x - playerPosition.x) ^ 2 +
				(creaturePosition.y - playerPosition.y) ^ 2)
			if distance <= 7 then
				monsterCount = monsterCount + 1
			end
		end
	end

	if storage[panelStorage].playersInScreen then
		if monsterCount >= storage[panelStorage].monstersCount then
			if manapercent() >= storage[panelStorage].mpPercent then
				say(storage[panelStorage].ueSpells)
			else
				if findItem(storage[panelStorage].runeItem) then
					useWith(storage[panelStorage].runeItem, target)
				end
			end
		else
			if findItem(storage[panelStorage].runeItem) then
				useWith(storage[panelStorage].runeItem, target)
			end
		end
	else
		if playerinScreen() then
			if findItem(storage[panelStorage].runeItem) then
				useWith(storage[panelStorage].runeItem, target)
			end
		else
			if monsterCount >= storage[panelStorage].monstersCount then
				if manapercent() >= storage[panelStorage].mpPercent then
					say(storage[panelStorage].ueSpells)
				else
					if findItem(storage[panelStorage].runeItem) then
						useWith(storage[panelStorage].runeItem, target)
					end
				end
			else
				if findItem(storage[panelStorage].runeItem) then
					useWith(storage[panelStorage].runeItem, target)
				end
			end
		end
	end
end)

local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    font: verdana-11px-rounded
    !text: tr("Rune: UE - Editor")

  Button
    id: edit
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: "Config"
    font: verdana-9px-italic
]])

local config = setupUI([[
Panel
  height: 185

  Label
    id: runeBox
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: parent.top
    margin-top: 5
    text-align: center
    text: "Rune"
    font: verdana-11px-rounded

  BotItem
    id: runeItem
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: runeBox.bottom
    margin-top: 5

  Label
    id: ueBox
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 7
    margin-left: 45
    text-align: left
    text: "Spell UE"
    font: verdana-11px-rounded

  BotTextEdit
    id: ueSpells
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: prev.bottom
    margin-top: 0
    margin-left: -15
    width: 140

  Label
    id: mpLabel
    anchors.right: parent.right
    anchors.top: ueBox.top
    text-align: right
    text: "MP%"
    font: verdana-11px-rounded

  BotTextEdit
    id: mpText
    anchors.right: parent.right
    anchors.top: ueSpells.top
    width: 30

  CheckBox
    id: boxPlayers
    anchors.left: parent.left
    anchors.top: mpText.bottom
    margin-top: 10
    margin-left: 18

  Label
    id: playersInScreen
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: boxPlayers.top
    text-align: center
    text: "Players In Screen"
    font: verdana-11px-rounded
    color: #fe4400

  Label
    id: scrollCount
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: playersInScreen.bottom
    margin-top: 10
    text-align: center
    text: "Monsters Count"
    font: verdana-11px-rounded

  HorizontalScrollBar
    id: scrollBarCount
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: scrollCount.bottom
    margin-left: 5
    margin-right: 5
    margin-top: 2
    minimum: 1
    maximum: 10
    step: 1

  Label
    id: labelOwner
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: scrollBarCount.bottom
    margin-top: 10
    text-align: center
    font: verdana-11px-rounded
]])
config:hide()

-- Main Window UI
ui.title:setOn(storage[panelStorage].enabled)
ui.title.onClick = function(widget)
    storage[panelStorage].enabled = not storage[panelStorage].enabled
    widget:setOn(storage[panelStorage].enabled)
end

do
    config.runeItem:setItemId(storage[panelStorage].runeItem)
    config.runeItem.onItemChange = function(self)
        storage[panelStorage].runeItem = self:getItemId()
    end
end

config.ueSpells:setText(storage[panelStorage].ueSpells or storage[panelStorage].ueSpells)
config.mpText:setText(storage[panelStorage].mpPercent)

config.ueSpells.onTextChange = function(widget, text)
    storage[panelStorage].ueSpells = text
end

config.mpText.onTextChange = function(widget, text)
    storage[panelStorage].mpPercent = tonumber(text)
end

config.boxPlayers:setChecked(storage[panelStorage].playersInScreen or false)
config.boxPlayers.onClick = function(widget)
    local currentCheckedState = widget:isChecked()
    storage[panelStorage].playersInScreen = not currentCheckedState
    widget:setChecked(not currentCheckedState)
end

config.scrollBarCount.onValueChange = function(scroll, value)
    monstersCount = value
    storage[panelStorage].monstersCount = monstersCount
    config.scrollCount:setText("Monsters Count: " .. monstersCount)
end

config.scrollBarCount:setValue(storage[panelStorage].monstersCount)
config.scrollCount:setText("Monsters Count: " .. storage[panelStorage].monstersCount)

-- mostrar o ocultar Edit
local showEdit = false
ui.edit.onClick = function(widget)
    showEdit = not showEdit
    if showEdit then
        config:show()
    else
        config:hide()
    end
end

-- Multispells
local distance = 4
local amountOfMonsters = 2
macro(2000, "Multi Target Spell",  function()
   local specAmount = 0
   if not g_game.isAttacking() then
       return
   end
   for i,mob in ipairs(getSpectators()) do
       if (getDistanceBetween(player:getPosition(), mob:getPosition())  <= distance and mob:isMonster())  then
           specAmount = specAmount + 1
       end
   end
   if (specAmount >= amountOfMonsters) then
       say(storage.Spell2, 250)
   else
       say(storage.Spell1, 250)
   end
end)
addTextEdit("Spell1", storage.Spell1 or "Single target", function(widget, text)
storage.Spell1 = text
end)
addTextEdit("Spell2", storage.Spell2 or "Multi target", function(widget, text)
storage.Spell2 = text
end)

-- Script By Asking
local targeting = macro(500, "Target Inteligente", function()
    if isInPz() then
        targetMonster = nil
        return
    end

    local playerPos = player:getPosition()


    local battlelist = getSpectators()

    local ignoreSet = {}
    local ignoreText = storage.Mobs or ""
    local monsterNames = string.split(ignoreText, ",")

    for _, name in ipairs(monsterNames) do
        ignoreSet[name:trim()] = true
    end

    local currentTarget = g_game.getAttackingCreature()
    local targetMonster = nil
    local closestDistance = tonumber(storage.Range)
    local lowestHealthPercent = 101

    local validTargets = {}

    for _, val in pairs(battlelist) do
        if val:isMonster() and not ignoreSet[val:getName()] then
            local distance = getDistanceBetween(playerPos, val:getPosition())
            if distance <= closestDistance and val:canShoot(closestDistance) then
                table.insert(validTargets, val)
            end
        end
    end


    for _, val in ipairs(validTargets) do
        local healthPercent = val:getHealthPercent()
        if healthPercent < lowestHealthPercent or currentTarget == val then
            lowestHealthPercent = healthPercent
            targetMonster = val
        end
    end


    if targetMonster and currentTarget ~= targetMonster then
        g_game.attack(targetMonster)
    end
end)

local labelmonster = UI.Label("Monster a Ignorar")
labelmonster:setColor("#00FFFF") -- celeste

UI.TextEdit(storage.Mobs or "monster1, monster2, monster3", function(widget, text)
    storage.Mobs = text
end)

UI.Label("Distancia Maxima a Revisar")
UI.TextEdit(storage.Range or "10", function(widget, text)
    local range = tonumber(text)
    if range then
        storage.Range = range
    else
        modules.game_textmessage.displayGameMessage("[Error] Ingrese un numero valido para la distancia maxima.")
    end
end)
UI.Separator()
-- Magias Knight
g_ui.loadUIFromString([[
ConfigWindow < MainWindow
  size: 150 225

  Label
    id: titleMagias
    text: SPELLS   KNIGHT
    font: verdana-11px-rounded
    color: #a73ec1
    margin-top: -19
    anchors.top: parent.top
    anchors.horizontalCenter: parent.horizontalCenter

  Panel
    id: lista
    anchors.fill: parent
    anchors.bottom: closeButton.top
    layout:
      type: grid
      cell-size: 110 15
      cell-spacing: 2

  Button
    id: closeButton
    text: Close
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
]])

local panelName = "config"
if not storage[panelName] then
  storage[panelName] = {
    enabled = false,
  }
end

local config = storage[panelName]

local rootWidget = g_ui.getRootWidget()
local configWindow = UI.createWindow('ConfigWindow', rootWidget)
configWindow:hide()

local listaMacros = {}

-- aqui van los macros

-- AntiPk Hur&Exgran
local singleTargetSpell = 'exori hur'
local multiTargetSpell = 'exori gran'
local distance =1
local amountOfMonsters = 2

local antipkek = macro(2000, "Antipk", function()
    local isSafe = true
    local specAmount = 0
    if not g_game.isAttacking() then
        return
    end
for i,mob in ipairs(getSpectators()) do
        if (getDistanceBetween(player:getPosition(), mob:getPosition()) <= distance and mob:isMonster()) then
            specAmount = specAmount + 1
        end
        if (mob:isPlayer() and (player:getName() ~= mob:getName()) and g_game.isAttacking (storage.Spell1)) then
            isSafe = false
        end
    end
    if (specAmount >= amountOfMonsters) and isSafe then
        say( multiTargetSpell )
    else
        say( singleTargetSpell )
    end
end)

-- Mspell no antipk Hur&Exori
local singleTargetSpell = 'exori hur'
local multiTargetSpell = 'exori'
local distance = 4
local amountOfMonsters = 2

local hurYexori = macro(2000, "Hur & Exori", function()
    if not g_game.isAttacking() then
        return
    end

    local specAmount = 0

    for _, mob in ipairs(getSpectators()) do
        if mob:isMonster() and getDistanceBetween(player:getPosition(), mob:getPosition()) <= distance then
            specAmount = specAmount + 1
        end
    end

    if specAmount >= amountOfMonsters then
        say(multiTargetSpell)
    else
        say(singleTargetSpell)
    end
end)

-- Mspell no antipk Hur&Exgran
local singleTargetSpell = 'exori hur'
local multiTargetSpell = 'exori gran'
local distance = 4
local amountOfMonsters = 2

local hurYexgran = macro(2000, "Hur & Exgran", function()
    if not g_game.isAttacking() then
        return
    end

    local specAmount = 0

    for _, mob in ipairs(getSpectators()) do
        if mob:isMonster() and getDistanceBetween(player:getPosition(), mob:getPosition()) <= distance then
            specAmount = specAmount + 1
        end
    end

    if specAmount >= amountOfMonsters then
        say(multiTargetSpell)
    else
        say(singleTargetSpell)
    end
end)

local exorihur = macro(2000, "Exori hur", function()
    if g_game.isAttacking() then
        say("exori hur")
    end
end)

local exori = macro(2000, "Exori", function()
    if g_game.isAttacking() then
        say("exori")
    end
end)

local exorigran = macro(2000, "Exori gran", function()
    if g_game.isAttacking() then
        say("exori gran")
    end
end)

local exorimas = macro(2000, "Exori Mas", function()
    if g_game.isAttacking() then
        say("exori mas")
    end
end)

local UtitoTempo = macro(2000, "utito tempo", function()
    if g_game.isAttacking() then
        say("utito tempo")
    end
end)

local config = {
    distance = 2, -- Define la distancia maxima para contar monstruos
    spell = "utito tempo" -- Define el hechizo a lanzar
}

local UtitoTempoPro = macro(300, "utito tempo pro", function()
    if hasPartyBuff() then return end

    local playerPosition = g_game.getLocalPlayer():getPosition()
    local monstersScreen = g_map.getSpectators(playerPosition, false) 
    local monsterCount = 0

    for _, creature in ipairs(monstersScreen) do
        if creature:isMonster() then
            local creaturePosition = creature:getPosition()
            local distance = math.max(math.abs(creaturePosition.x - playerPosition.x), 
                                      math.abs(creaturePosition.y - playerPosition.y))
            if distance <= config.distance then
                monsterCount = monsterCount + 1
            end
        end
    end

    if monsterCount >= 2 then
        say(config.spell)
    end
end, false)

-- aqui los agregas a la ventana 
table.insert(listaMacros, antipkek)
table.insert(listaMacros, hurYexori)
table.insert(listaMacros, hurYexgran)
table.insert(listaMacros, exorihur)
table.insert(listaMacros, exori)
table.insert(listaMacros, exorigran)
table.insert(listaMacros, exorimas)
table.insert(listaMacros, UtitoTempo)
table.insert(listaMacros, UtitoTempoPro)

local checkboxes = {}

for _, mac in ipairs(listaMacros) do
    local checkbox = g_ui.createWidget("CheckBox", configWindow.lista)
    checkbox:setText(mac.switch:getText())
    checkbox.onCheckChange = function(wid, isChecked)
        mac.setOn(isChecked)
    end
    checkbox:setChecked(mac.isOn())
    mac.switch:setVisible(false)
    table.insert(checkboxes, checkbox)

 -- Tooltip para "Antipk"
    if mac.switch:getText() == "Antipk" then
        checkbox:setTooltip("Este spell lanza Exori hur & si hay mas de 2 monster lanza Exori gran Cuidando no sacar Pk.")
    end
 -- Tooltip para "Hur&Exori"
    if mac.switch:getText() == "Hur & Exori" then
        checkbox:setTooltip("Este spell lanza exori hur & si hay mas de 2 monster lanza Exori, si hay players igual lanzara Exori.")
    end
    -- Tooltip para "Hur&Exgran"
    if mac.switch:getText() == "Hur & Exgran" then
        checkbox:setTooltip("Este spell lanza Exori hur & si hay mas de 2 monster lanza Exori gran, si hay players igual lanzara Exori gran.")
    end
    -- Tooltip para "UtitoTempoPro"
    if mac.switch:getText() == "utito tempo pro" then
        checkbox:setTooltip("Este spell lanzara utito tempo si hay 2 o mas monster en un rango de 2sqm.")
    end
end

configWindow.closeButton.onClick = function(widget)
    configWindow:hide()
end

-- Boton para abrir la ventana
local openButton = UI.Button("Magias Knight", function()
    configWindow:show()
    configWindow:setFocusable(false)
    configWindow:raise()
    configWindow:focus()
end)
openButton:setColor("#00FFFF") -- Color cian

-- Animacion de brillo para el titulo
local titleMagias = configWindow.titleMagias
local text = "SPELLS   KNIGHT"
local glowPosition = 1
local glowDirection = 1

macro(50, function()
    local numChars = #text
    local glowRange = math.max(1, math.floor(numChars / 10)) 
    local coloredText = {}

    for i = 1, numChars do
        local char = text:sub(i, i)
        local color = "#a73ec1" -- Color base
        if math.abs(i - glowPosition) <= glowRange then
            color = "#dfbae9" -- Color de brillo
        end
        table.insert(coloredText, char)
        table.insert(coloredText, color)
    end

    glowPosition = glowPosition + glowDirection
    if glowPosition > numChars then
        glowPosition = numChars - 1
        glowDirection = -1
    elseif glowPosition < 1 then
        glowPosition = 2
        glowDirection = 1
    end

    titleMagias:setColoredText(coloredText)
end)
-- Exani hur Up Y Down
local ThingAtrr = {
    Ground = 0,
    GroundBorder = 1,
    NotMoveable = 13,
    NotPathable = 15,
    Elevation = 25,
}

local cursorWidget = g_ui.getRootWidget():recursiveGetChildById('pointer');
local initialPos = { x = cursorWidget:getPosition().x / cursorWidget:getWidth(), y = cursorWidget:getPosition().y / cursorWidget:getHeight() };

local availableKeys = {
    ['Up'] = {-1, 0 },
    ['Down'] = {1, 2 },
    ['Left'] = {-1, 3 },
    ['Right'] = {1, 1 }
};


local function hasAttr(tile, data)
    if not tile then return false end
    
    for index, thing in ipairs(tile:getThings()) do
        local things = g_things.getThingType(thing:getId())
        local found = 0
        for idx, attr in ipairs(data.attr) do
            if things:hasAttribute(attr) then
                if data.any and (not data.elevation or data.elevation == index - 1) then
                    return true, index -1
                end
                found = found + 1
            end
        end
        if found == #data.attr and (not data.elevation or data.elevation == index - 1) then
            return true, index - 1
        end
    end
end

local Exani = macro(300, "Exani Up/Down" ,function ()
    local fromPosition = pos()
    local toPosition = pos()
    local keypadPos = { x = cursorWidget:getPosition().x / cursorWidget:getWidth(), y = cursorWidget:getPosition().y / cursorWidget:getHeight() };
    local diffPos = { x = initialPos.x - keypadPos.x, y = initialPos.y - keypadPos.y };

    local rotation
    if (diffPos.y < 0.46 and diffPos.y > -0.46) then
        if (diffPos.x > 0) then
            toPosition.x = toPosition.x + availableKeys['Left'][1];
            rotation = availableKeys['Left'][2]
        elseif (diffPos.x < 0) then
            toPosition.x = toPosition.x + availableKeys['Right'][1];
            rotation = availableKeys['Right'][2]
        else return end
    elseif (diffPos.x < 0.46 and diffPos.x > -0.46) then
        if (diffPos.y > 0) then
            toPosition.y = toPosition.y + availableKeys['Up'][1];
            rotation = availableKeys['Up'][2]
        elseif (diffPos.y < 0) then
            toPosition.y = toPosition.y + availableKeys['Down'][1];
            rotation = availableKeys['Down'][2]
        else return; end
    end
    if not rotation then return end

    local toUpTile = g_map.getTile({x = fromPosition.x, y = fromPosition.y, z = fromPosition.z - 1})
    local toDownTile = g_map.getTile({x = toPosition.x,y = toPosition.y,z = toPosition.z})


    if not toUpTile or not hasAttr(toUpTile, {elevation = 0, any = true, attr = {ThingAtrr.Ground, ThingAtrr.GroundBorder}})  and not hasAttr(toUpTile, {any = false, attr ={ThingAtrr.NotMoveable, ThingAtrr.NotPathable}}) then
        local nextPos = g_map.getTile({x = toPosition.x, y =  toPosition.y, z =  toPosition.z - 1})
        if nextPos and hasAttr(nextPos,  {any = true, attr = {ThingAtrr.Ground, ThingAtrr.GroundBorder}}) and ((not hasAttr(nextPos, {attr = {ThingAtrr.Elevation}}) or not hasAttr(nextPos, {any = false, attr = {ThingAtrr.NotMoveable, ThingAtrr.NotPathable}}))) then
            turn(rotation)
            say("exani hur up")
            return
        end
    end
    if not toDownTile or not hasAttr(toDownTile,{elevation = 0, any = true, attr= {ThingAtrr.Ground, ThingAtrr.GroundBorder}}) and not hasAttr(toDownTile, {any = true, attr = {ThingAtrr.NotPathable}}) then
        local nextPos = g_map.getTile({x = toPosition.x, y =   toPosition.y, z= toPosition.z + 1})
        if nextPos and hasAttr(nextPos, {any = true, attr = {ThingAtrr.Ground, ThingAtrr.GroundBorder}}) and ((not hasAttr(nextPos, {attr = {ThingAtrr.Elevation}}) or not hasAttr(nextPos, {any = false, attr = {ThingAtrr.NotMoveable, ThingAtrr.NotPathable}}))) then
            turn(rotation)
            say("exani hur down")
        end
    end
 end);

local moneyIds = {3031, 3035} -- gold coin, platinium coin
macro(1000, "Exchange money", function()
  local containers = g_game.getContainers()
  for index, container in pairs(containers) do
    if not container.lootContainer then -- ignore monster containers
      for i, item in ipairs(container:getItems()) do
        if item:getCount() == 100 then
          for m, moneyId in ipairs(moneyIds) do
            if item:getId() == moneyId then
              return g_game.use(item)            
            end
          end
        end
      end
    end
  end
end)

local labelmonster = UI.Label("Mana Training")
labelmonster:setColor("#00FFFF") -- celeste

if type(storage.manaTrain) ~= "table" then
  storage.manaTrain = {on=false, title="MP%", text="utevo lux", min=80, max=100}
end

local manatrainmacro = macro(1000, function()
  if TargetBot and TargetBot.isActive() then return end -- pause when attacking
  local mana = math.min(100, math.floor(100 * (player:getMana() / player:getMaxMana())))
  if storage.manaTrain.max >= mana and mana >= storage.manaTrain.min then
    say(storage.manaTrain.text)
  end
end)
manatrainmacro.setOn(storage.manaTrain.on)

UI.DualScrollPanel(storage.manaTrain, function(widget, newParams) 
  storage.manaTrain = newParams
  manatrainmacro.setOn(storage.manaTrain.on)
end)
UI.Separator()
